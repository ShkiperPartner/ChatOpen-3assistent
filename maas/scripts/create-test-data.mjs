import { createClient } from '@supabase/supabase-js';

const supabaseUrl = 'https://fcsxnsjnetrtcxprcpur.supabase.co';
const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZjc3huc2puZXRydGN4cHJjcHVyIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTkyMjEyODUsImV4cCI6MjA3NDc5NzI4NX0.MmIqCxAobuvYAYrFHBsQnglOofs1sXtAb4yiOyB9_Rk';

const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function createTestData() {
  try {
    console.log('üöÄ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è MaaS...\n');

    // –®–∞–≥ 1: –°–æ–∑–¥–∞—ë–º –ø—Ä–æ–µ–∫—Ç
    console.log('üìã –®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞...');
    const { data: project, error: projectError } = await supabase
      .from('projects')
      .insert({
        user_id: 'student-test-user',
        name: 'My First MaaS Project',
        mission: '–ò–∑—É—á–∏—Ç—å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É MaaS –∏ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å –ø–∞–º—è—Ç—å—é',
        goals: ['–°–æ–∑–¥–∞—Ç—å –ë–î —Å—Ç—Ä—É–∫—Ç—É—Ä—É', '–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å Claude Code', '–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å n8n workflow'],
        is_default: true,
        status: 'active'
      })
      .select()
      .single();

    if (projectError) {
      // –ï—Å–ª–∏ –ø—Ä–æ–µ–∫—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ
      if (projectError.code === '23505') {
        console.log('‚ö†Ô∏è  –ü—Ä–æ–µ–∫—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ª—É—á–∞–µ–º...');
        const { data: existingProject } = await supabase
          .from('projects')
          .select()
          .eq('user_id', 'student-test-user')
          .single();

        if (!existingProject) throw projectError;

        console.log('‚úÖ –ù–∞–π–¥–µ–Ω –ø—Ä–æ–µ–∫—Ç:', existingProject.id);
        console.log(`   –ù–∞–∑–≤–∞–Ω–∏–µ: ${existingProject.name}\n`);

        return existingProject.id;
      }
      throw projectError;
    }

    const projectId = project.id;
    console.log('‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω:', projectId);
    console.log(`   –ù–∞–∑–≤–∞–Ω–∏–µ: ${project.name}\n`);

    // –®–∞–≥ 2: –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–∫—Ç—ã
    console.log('üìä –®–∞–≥ 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ–≤...');
    const { data: facts, error: factsError } = await supabase
      .from('facts')
      .insert([
        {
          project_id: projectId,
          session_id: 'learning-session-1',
          user_id: 'student-test-user',
          subject: 'MaaS Components',
          value: {
            components: ['projects', 'facts', 'decisions', 'links', 'sources', 'metrics', 'snapshots'],
            purpose: 'AI memory management'
          },
          level: 'fact',
          source_type: 'user_stated',
          confidence: 1.0,
          importance: 8
        },
        {
          project_id: projectId,
          session_id: 'learning-session-1',
          user_id: 'student-test-user',
          subject: 'User Learning Goal',
          value: {
            goal: 'Understand MaaS architecture',
            progress: '50%',
            next_step: 'Test with n8n'
          },
          level: 'insight',
          source_type: 'inferred',
          confidence: 0.85,
          importance: 7
        }
      ])
      .select();

    if (factsError) throw factsError;
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${facts.length} —Ñ–∞–∫—Ç–æ–≤\n`);

    // –®–∞–≥ 3: –î–æ–±–∞–≤–ª—è–µ–º —Å–∞–º–º–∞—Ä–∏ —Ç—Ä–µ–¥–∞
    console.log('üìù –®–∞–≥ 3: –°–æ–∑–¥–∞–Ω–∏–µ thread summary...');
    const { data: summary, error: summaryError } = await supabase
      .from('thread_summaries')
      .insert({
        project_id: projectId,
        session_id: 'learning-session-1',
        thread_id: 'thread-123',
        summary_text: '–°—Ç—É–¥–µ–Ω—Ç –∏–∑—É—á–∞–µ—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É MaaS –∏ —Å–æ–∑–¥–∞–ª 7 —Ç–∞–±–ª–∏—Ü –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞–º—è—Ç–∏ AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞. –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: facts, decisions, links, sources.',
        summary_type: 'auto',
        message_count: 12,
        token_count: 1500,
        keywords: ['MaaS', 'architecture', 'database', 'AI memory'],
        topics: [
          { topic: 'Database Design', relevance: 0.9 },
          { topic: 'AI Systems', relevance: 0.85 },
          { topic: 'Learning Process', relevance: 0.7 }
        ]
      })
      .select()
      .single();

    if (summaryError) throw summaryError;
    console.log('‚úÖ Thread summary —Å–æ–∑–¥–∞–Ω\n');

    // –®–∞–≥ 4: –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ—à–µ–Ω–∏–µ
    console.log('üí° –®–∞–≥ 4: –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è...');
    const { data: decision, error: decisionError } = await supabase
      .from('decisions')
      .insert({
        project_id: projectId,
        session_id: 'learning-session-1',
        decision_text: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Supabase –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è MaaS –¥–∞–Ω–Ω—ã—Ö –≤–º–µ—Å—Ç–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ PostgreSQL',
        decision_type: 'preference',
        status: 'completed',
        priority: 'high',
        outcome: '–£—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–∞ –ë–î –≤ Supabase, –≤—Å–µ 7 —Ç–∞–±–ª–∏—Ü —Ä–∞–±–æ—Ç–∞—é—Ç',
        tags: ['database', 'infrastructure']
      })
      .select()
      .single();

    if (decisionError) throw decisionError;
    console.log('‚úÖ –†–µ—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ\n');

    // –®–∞–≥ 5: –°–æ–∑–¥–∞—ë–º —Å–≤—è–∑–∏ –º–µ–∂–¥—É —Å—É—â–Ω–æ—Å—Ç—è–º–∏
    console.log('üîó –®–∞–≥ 5: –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤—è–∑–µ–π...');
    const { data: links, error: linksError } = await supabase
      .from('links')
      .insert([
        {
          project_id: projectId,
          source_type: 'fact',
          source_id: facts[0].id,
          target_type: 'summary',
          target_id: summary.id,
          link_type: 'related_to',
          strength: 0.9
        },
        {
          project_id: projectId,
          source_type: 'decision',
          source_id: decision.id,
          target_type: 'fact',
          target_id: facts[0].id,
          link_type: 'supports',
          strength: 0.85
        }
      ])
      .select();

    if (linksError) throw linksError;
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${links.length} —Å–≤—è–∑–µ–π\n`);

    // –®–∞–≥ 6: –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫
    console.log('üìö –®–∞–≥ 6: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞...');
    const { data: source, error: sourceError } = await supabase
      .from('sources')
      .insert({
        project_id: projectId,
        source_type: 'web',
        source_url: 'https://docs.claude.com/en/docs/claude-code',
        source_title: 'Claude Code Documentation',
        source_excerpt: 'Memory as a Service (MaaS) architecture for AI assistants',
        author: 'Anthropic',
        credibility_score: 0.95,
        tags: ['documentation', 'AI', 'MaaS']
      })
      .select()
      .single();

    if (sourceError) throw sourceError;
    console.log('‚úÖ –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω\n');

    // –®–∞–≥ 7: –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
    console.log('üìà –®–∞–≥ 7: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫...');
    const { data: metrics, error: metricsError } = await supabase
      .from('maas_metrics')
      .insert([
        {
          project_id: projectId,
          metric_type: 'fact_created',
          metric_value: 2,
          metric_unit: 'count'
        },
        {
          project_id: projectId,
          metric_type: 'summary_generated',
          metric_value: 1,
          metric_unit: 'count'
        }
      ])
      .select();

    if (metricsError) throw metricsError;
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${metrics.length} –º–µ—Ç—Ä–∏–∫\n`);

    // –®–∞–≥ 8: –°–æ–∑–¥–∞—ë–º —Å–Ω–∞–ø—à–æ—Ç
    console.log('üíæ –®–∞–≥ 8: –°–æ–∑–¥–∞–Ω–∏–µ —Å–Ω–∞–ø—à–æ—Ç–∞...');
    const { data: snapshot, error: snapshotError } = await supabase
      .from('snapshot_cache')
      .insert({
        project_id: projectId,
        session_id: 'learning-session-1',
        snapshot_type: 'context',
        snapshot_data: {
          mission: project.mission,
          recent_facts: facts.map(f => f.subject),
          recent_decisions: [decision.decision_text],
          summary: summary.summary_text
        },
        version: 1,
        size_bytes: 512
      })
      .select()
      .single();

    if (snapshotError) throw snapshotError;
    console.log('‚úÖ –°–Ω–∞–ø—à–æ—Ç —Å–æ–∑–¥–∞–Ω\n');

    // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log('=' .repeat(60));
    console.log('üéâ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!\n');
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log(`   ‚Ä¢ –ü—Ä–æ–µ–∫—Ç ID: ${projectId}`);
    console.log(`   ‚Ä¢ –§–∞–∫—Ç–æ–≤: ${facts.length}`);
    console.log(`   ‚Ä¢ –°–∞–º–º–∞—Ä–∏: 1`);
    console.log(`   ‚Ä¢ –†–µ—à–µ–Ω–∏–π: 1`);
    console.log(`   ‚Ä¢ –°–≤—è–∑–µ–π: ${links.length}`);
    console.log(`   ‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤: 1`);
    console.log(`   ‚Ä¢ –ú–µ—Ç—Ä–∏–∫: ${metrics.length}`);
    console.log(`   ‚Ä¢ –°–Ω–∞–ø—à–æ—Ç–æ–≤: 1\n`);

    console.log('üîç –ü—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã:');
    console.log(`   SELECT * FROM facts WHERE project_id = '${projectId}';`);
    console.log(`   SELECT * FROM links WHERE project_id = '${projectId}';`);
    console.log(`   SELECT * FROM thread_summaries WHERE session_id = 'learning-session-1';\n`);

    return projectId;

  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error.message);
    console.error(error);
    process.exit(1);
  }
}

createTestData();
