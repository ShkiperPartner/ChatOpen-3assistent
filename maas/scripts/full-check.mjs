import { createClient } from '@supabase/supabase-js';

const supabaseUrl = 'https://fcsxnsjnetrtcxprcpur.supabase.co';
const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZjc3huc2puZXRydGN4cHJjcHVyIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTkyMjEyODUsImV4cCI6MjA3NDc5NzI4NX0.MmIqCxAobuvYAYrFHBsQnglOofs1sXtAb4yiOyB9_Rk';

const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function fullCheck() {
  console.log('üîç –ü–û–õ–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê SUPABASE –ë–î\n');
  console.log('='.repeat(80));

  // –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
  const allTables = [
    // –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    'users',
    'personalities',
    'chats',
    'messages',

    // MaaS —Ç–∞–±–ª–∏—Ü—ã
    'projects',
    'facts',
    'thread_summaries',
    'decisions',
    'links',
    'sources',
    'maas_metrics',
    'snapshot_cache'
  ];

  console.log('\nüìã –ü–†–û–í–ï–†–ö–ê –°–£–©–ï–°–¢–í–û–í–ê–ù–ò–Ø –¢–ê–ë–õ–ò–¶:\n');

  const existingTables = [];
  const missingTables = [];

  for (const table of allTables) {
    try {
      const { data, error, count } = await supabase
        .from(table)
        .select('*', { count: 'exact', head: true });

      if (error) {
        console.log(`‚ùå ${table.padEnd(25)} - –ù–ï –°–£–©–ï–°–¢–í–£–ï–¢ (${error.code})`);
        missingTables.push(table);
      } else {
        console.log(`‚úÖ ${table.padEnd(25)} - —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–∑–∞–ø–∏—Å–µ–π: ${count || 0})`);
        existingTables.push({ table, count: count || 0 });
      }
    } catch (err) {
      console.log(`‚ùå ${table.padEnd(25)} - –û–®–ò–ë–ö–ê: ${err.message}`);
      missingTables.push(table);
    }
  }

  console.log('\n' + '='.repeat(80));
  console.log(`\nüìä –ò–¢–û–ì–û: ${existingTables.length} —Ç–∞–±–ª–∏—Ü —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, ${missingTables.length} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n`);

  // –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Ç–∞–±–ª–∏—Ü–∞–º
  console.log('='.repeat(80));
  console.log('\nüì¶ –°–û–î–ï–†–ñ–ò–ú–û–ï –¢–ê–ë–õ–ò–¶:\n');

  for (const { table, count } of existingTables) {
    if (count > 0) {
      console.log(`\n${table.toUpperCase()} (${count} –∑–∞–ø–∏—Å–µ–π):`);
      console.log('-'.repeat(80));

      const { data, error } = await supabase
        .from(table)
        .select('*')
        .limit(5);

      if (!error && data) {
        data.forEach((row, i) => {
          console.log(`\n  –ó–∞–ø–∏—Å—å ${i + 1}:`);

          // –í—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è
          if (table === 'projects') {
            console.log(`    ID: ${row.id}`);
            console.log(`    User ID: ${row.user_id}`);
            console.log(`    Name: ${row.name}`);
            console.log(`    Mission: ${row.mission}`);
            console.log(`    Status: ${row.status}`);
          } else if (table === 'facts') {
            console.log(`    ID: ${row.id}`);
            console.log(`    Project ID: ${row.project_id}`);
            console.log(`    Subject: ${row.subject}`);
            console.log(`    Value: ${JSON.stringify(row.value)}`);
            console.log(`    Level: ${row.level}`);
          } else if (table === 'thread_summaries') {
            console.log(`    ID: ${row.id}`);
            console.log(`    Project ID: ${row.project_id}`);
            console.log(`    Summary: ${row.summary_text?.substring(0, 100)}...`);
          } else if (table === 'decisions') {
            console.log(`    ID: ${row.id}`);
            console.log(`    Decision: ${row.decision_text?.substring(0, 80)}`);
            console.log(`    Type: ${row.decision_type}, Status: ${row.status}`);
          } else if (table === 'links') {
            console.log(`    ID: ${row.id}`);
            console.log(`    ${row.source_type}(${row.source_id}) --[${row.link_type}]--> ${row.target_type}(${row.target_id})`);
            console.log(`    Strength: ${row.strength}`);
          } else if (table === 'sources') {
            console.log(`    ID: ${row.id}`);
            console.log(`    Type: ${row.source_type}`);
            console.log(`    URL: ${row.source_url}`);
            console.log(`    Title: ${row.source_title}`);
          } else if (table === 'maas_metrics') {
            console.log(`    ID: ${row.id}`);
            console.log(`    Type: ${row.metric_type}`);
            console.log(`    Value: ${row.metric_value} ${row.metric_unit || ''}`);
          } else if (table === 'snapshot_cache') {
            console.log(`    ID: ${row.id}`);
            console.log(`    Type: ${row.snapshot_type}`);
            console.log(`    Version: ${row.version}`);
            console.log(`    Size: ${row.size_bytes} bytes`);
          } else {
            // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü - –ø–µ—Ä–≤—ã–µ 3 –ø–æ–ª—è
            const keys = Object.keys(row).slice(0, 5);
            keys.forEach(key => {
              const value = typeof row[key] === 'object'
                ? JSON.stringify(row[key]).substring(0, 60)
                : String(row[key]).substring(0, 60);
              console.log(`    ${key}: ${value}`);
            });
          }
        });
      }
    }
  }

  console.log('\n' + '='.repeat(80));
  console.log('\nüéØ –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n');

  const maas_tables = existingTables.filter(t =>
    ['facts', 'thread_summaries', 'decisions', 'links', 'sources', 'maas_metrics', 'snapshot_cache'].includes(t.table)
  );

  const manual_tables = existingTables.filter(t =>
    ['projects', 'chats'].includes(t.table)
  );

  const main_tables = existingTables.filter(t =>
    ['users', 'personalities', 'messages'].includes(t.table)
  );

  console.log(`‚úã –°–æ–∑–¥–∞–Ω—ã –≤—Ä—É—á–Ω—É—é: ${manual_tables.length} —Ç–∞–±–ª–∏—Ü`);
  manual_tables.forEach(t => console.log(`   - ${t.table} (${t.count} –∑–∞–ø–∏—Å–µ–π)`));

  console.log(`\nü§ñ –ò–∑ –º–∏–≥—Ä–∞—Ü–∏–∏ MaaS: ${maas_tables.length} —Ç–∞–±–ª–∏—Ü`);
  maas_tables.forEach(t => console.log(`   - ${t.table} (${t.count} –∑–∞–ø–∏—Å–µ–π)`));

  console.log(`\nüìã –û—Å–Ω–æ–≤–Ω–∞—è –ë–î: ${main_tables.length} —Ç–∞–±–ª–∏—Ü`);
  main_tables.forEach(t => console.log(`   - ${t.table} (${t.count} –∑–∞–ø–∏—Å–µ–π)`));

  console.log(`\nüî¢ –ò–¢–û–ì–û –í MAAS: ${manual_tables.length + maas_tables.length} —Ç–∞–±–ª–∏—Ü (${manual_tables.length} –≤—Ä—É—á–Ω—É—é + ${maas_tables.length} –º–∏–≥—Ä–∞—Ü–∏—è)`);

  console.log('\n' + '='.repeat(80));
}

fullCheck().catch(console.error);
