import { createClient } from '@supabase/supabase-js';
import { readFileSync } from 'fs';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const supabaseUrl = 'https://fcsxnsjnetrtcxprcpur.supabase.co';
const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZjc3huc2puZXRydGN4cHJjcHVyIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTkyMjEyODUsImV4cCI6MjA3NDc5NzI4NX0.MmIqCxAobuvYAYrFHBsQnglOofs1sXtAb4yiOyB9_Rk';

const supabase = createClient(supabaseUrl, supabaseAnonKey);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ SQL –∫–æ–º–∞–Ω–¥
function parseSQLCommands(sql) {
  const commands = [];
  let currentCommand = '';
  let inFunction = false;
  let dollarQuoteTag = null;

  const lines = sql.split('\n');

  for (let line of lines) {
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    const trimmed = line.trim();
    if (!trimmed || trimmed.startsWith('--')) {
      continue;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏
    if (trimmed.match(/CREATE\s+(OR\s+REPLACE\s+)?FUNCTION/i)) {
      inFunction = true;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º dollar quote
    const dollarMatch = trimmed.match(/\$([a-zA-Z]*)\$/);
    if (dollarMatch) {
      if (!dollarQuoteTag) {
        dollarQuoteTag = dollarMatch[0];
      } else if (dollarMatch[0] === dollarQuoteTag) {
        dollarQuoteTag = null;
        if (trimmed.endsWith(';')) {
          currentCommand += line + '\n';
          commands.push(currentCommand.trim());
          currentCommand = '';
          inFunction = false;
          continue;
        }
      }
    }

    currentCommand += line + '\n';

    // –ï—Å–ª–∏ –Ω–µ –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —Å—Ç—Ä–æ–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ ;
    if (!inFunction && !dollarQuoteTag && trimmed.endsWith(';')) {
      commands.push(currentCommand.trim());
      currentCommand = '';
    }
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–æ–º–∞–Ω–¥—É –µ—Å–ª–∏ –µ—Å—Ç—å
  if (currentCommand.trim()) {
    commands.push(currentCommand.trim());
  }

  return commands;
}

async function applyMigration() {
  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ MaaS –º–∏–≥—Ä–∞—Ü–∏–∏...\n');

    // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –º–∏–≥—Ä–∞—Ü–∏–∏ (–≤–µ—Ä—Å–∏—è –±–µ–∑ RLS –¥–ª—è —É—á–µ–±–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞)
    const migrationPath = join(__dirname, '../migrations/20250205000001_add_maas_tables_no_rls.sql');
    const migrationSQL = readFileSync(migrationPath, 'utf-8');

    console.log('üìù –ü–∞—Ä—Å–∏–Ω–≥ SQL –∫–æ–º–∞–Ω–¥...\n');
    const commands = parseSQLCommands(migrationSQL);
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${commands.length} SQL –∫–æ–º–∞–Ω–¥\n`);

    let step = 0;
    let createdTables = [];

    for (const command of commands) {
      step++;

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–º–∞–Ω–¥—ã
      let commandType = 'SQL';
      let commandDesc = '';

      if (command.match(/CREATE EXTENSION/i)) {
        commandType = 'üîß Extension';
        commandDesc = 'uuid-ossp';
      } else if (command.match(/CREATE TABLE.*facts/i)) {
        commandType = 'üìã Table';
        commandDesc = 'facts';
        createdTables.push('facts');
      } else if (command.match(/CREATE TABLE.*thread_summaries/i)) {
        commandType = 'üìã Table';
        commandDesc = 'thread_summaries';
        createdTables.push('thread_summaries');
      } else if (command.match(/CREATE TABLE.*decisions/i)) {
        commandType = 'üìã Table';
        commandDesc = 'decisions';
        createdTables.push('decisions');
      } else if (command.match(/CREATE TABLE.*links/i)) {
        commandType = 'üìã Table';
        commandDesc = 'links';
        createdTables.push('links');
      } else if (command.match(/CREATE TABLE.*sources/i)) {
        commandType = 'üìã Table';
        commandDesc = 'sources';
        createdTables.push('sources');
      } else if (command.match(/CREATE TABLE.*maas_metrics/i)) {
        commandType = 'üìã Table';
        commandDesc = 'maas_metrics';
        createdTables.push('maas_metrics');
      } else if (command.match(/CREATE TABLE.*snapshot_cache/i)) {
        commandType = 'üìã Table';
        commandDesc = 'snapshot_cache';
        createdTables.push('snapshot_cache');
      } else if (command.match(/CREATE INDEX/i)) {
        commandType = 'üîç Index';
        const match = command.match(/CREATE INDEX\s+(\w+)/i);
        commandDesc = match ? match[1] : '';
      } else if (command.match(/ALTER TABLE.*ENABLE ROW LEVEL SECURITY/i)) {
        commandType = 'üîí RLS';
        const match = command.match(/ALTER TABLE\s+(\w+)/i);
        commandDesc = match ? `Enable on ${match[1]}` : '';
      } else if (command.match(/CREATE POLICY/i)) {
        commandType = 'üîê Policy';
        const match = command.match(/ON\s+(\w+)/i);
        commandDesc = match ? `on ${match[1]}` : '';
      } else if (command.match(/CREATE.*FUNCTION.*cleanup_expired/i)) {
        commandType = '‚öôÔ∏è  Function';
        commandDesc = 'cleanup_expired_snapshots';
      } else if (command.match(/CREATE.*FUNCTION.*update_updated_at/i)) {
        commandType = '‚öôÔ∏è  Function';
        commandDesc = 'update_updated_at_column';
      } else if (command.match(/CREATE TRIGGER/i)) {
        commandType = '‚ö° Trigger';
        const match = command.match(/CREATE TRIGGER\s+(\w+)/i);
        commandDesc = match ? match[1] : '';
      } else if (command.match(/DROP TRIGGER/i)) {
        commandType = 'üóëÔ∏è  Drop';
        const match = command.match(/DROP TRIGGER\s+(\w+)/i);
        commandDesc = match ? match[1] : '';
      } else if (command.match(/COMMENT ON/i)) {
        commandType = 'üí¨ Comment';
      }

      const displayDesc = commandDesc ? ` (${commandDesc})` : '';
      process.stdout.write(`[${step}/${commands.length}] ${commandType}${displayDesc}...`);

      try {
        const { error } = await supabase.rpc('exec_sql', { sql: command });

        if (error) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –æ–∂–∏–¥–∞–µ–º—ã–µ –æ—à–∏–±–∫–∏
          if (error.message.includes('already exists')) {
            console.log(' ‚ö†Ô∏è  Already exists');
            continue;
          }
          throw error;
        }

        console.log(' ‚úÖ');

        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 100));

      } catch (error) {
        console.log(' ‚ùå');
        console.error(`\n‚õî –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ ${step}:`);
        console.error(error.message);
        console.error('\n–ö–æ–º–∞–Ω–¥–∞:', command.substring(0, 200) + '...\n');
        throw error;
      }
    }

    console.log('\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞!\n');
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:');
    createdTables.forEach(table => console.log(`   ‚úì ${table}`));

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü...\n');

    const tables = ['facts', 'thread_summaries', 'decisions', 'links', 'sources', 'maas_metrics', 'snapshot_cache'];

    for (const table of tables) {
      const { count, error } = await supabase
        .from(table)
        .select('*', { count: 'exact', head: true });

      if (error) {
        console.log(`‚ùå ${table}: –æ—à–∏–±–∫–∞ - ${error.message}`);
      } else {
        console.log(`‚úÖ ${table}: —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–∑–∞–ø–∏—Å–µ–π: ${count || 0})`);
      }
    }

    console.log('\nüéØ MaaS —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!');
    console.log('\nüìö –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
    console.log('   1. –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç: —Å–º. maas/APPLY_MIGRATION.md');
    console.log('   2. –ò–∑—É—á–∏—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ maas/STEP_4_QUERIES.sql');
    console.log('   3. –î–æ–±–∞–≤—å—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ\n');

  } catch (error) {
    console.error('\nüí• –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error.message);
    process.exit(1);
  }
}

applyMigration();
